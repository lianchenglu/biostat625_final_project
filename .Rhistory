SexNumPartnLife,
SexNumPartYear,
DaysMentHlthBad
)
Hmisc::describe(df2)
df3 <- na.omit(df2)
#df3$SleepMinNight <- df3$SleepHrsNight * 60
#df3 <- df3[, -which(names(df3) %in% "SleepHrsNight")]
# cor(df3$BPSysAve,df3$BPDiaAve)
psych::describe(df3)
# psych::pairs.panels(df3)
hist(df3$SleepHrsNight)
# colSums(is.na(df2)) / nrow(df2)
fit0 <-
lm(SleepHrsNight ~ .,
data = df3)
#data type
df3$Gender <- ifelse(df3$Gender == "male", 0, 1)
df3 <- df3 %>%
mutate(
Race1 = case_when(
Race1 == 'Black' ~ 1,
Race1 == 'Hispanic' ~ 2,
Race1 == 'Mexican' ~ 3,
Race1 == 'White' ~ 4,
Race1 == 'Other' ~ 5,
TRUE ~ NA_integer_  # Default value if none of the conditions are met
)
)
############### (2) Baseline characteristics ########################################
############### (3) linear regression model ########################################
##simple linear regression##
model1 = lm(df3$SleepHrsNight ~ df3$TotChol, data = df3)
summary(model1)
## multiple linear regression##
m_initial=lm(SleepHrsNight~TotChol+Age+Gender+factor(Race1),df3)
summary(m_initial)
m_knrisk=lm(SleepHrsNight~TotChol+Age+Gender+factor(Race1)+BMI+BPDiaAve+BPSysAve+AlcoholYear+DaysMentHlthBad,df3)
summary(m_knrisk)
m_full=lm(SleepHrsNight~TotChol+Age+Gender+factor(Race1)+BMI+BPDiaAve+BPSysAve+AlcoholYear+DaysMentHlthBad+HomeRooms+SexNumPartnLife+SexNumPartYear+Poverty, df3)
summary(m_full)
plot(df3$TotChol,df3$SleepMinNight, main = "Scatter Plot with Linear Regression Line", xlab = "X-axis", ylab = "Y-axis")
#log outcome
df3$logSleepHrsNight = log(df3$SleepHrsNight+1)
m_logfull_1=lm(logSleepHrsNight~TotChol+Age+Gender+factor(Race1)+BMI+BPDiaAve+BPSysAve+AlcoholYear+DaysMentHlthBad+HomeRooms+SexNumPartnLife+SexNumPartYear+Poverty, df3)
summary(m_logfull_1)
#log x
df3$logTotChol = log(df3$TotChol+1)
m_logfull_2=lm(SleepHrsNight~logTotChol+Age+Gender+factor(Race1)+BMI+BPDiaAve+BPSysAve+AlcoholYear+DaysMentHlthBad+HomeRooms+SexNumPartnLife+SexNumPartYear+Poverty, df3)
summary(m_logfull_2)
# x^2
df3$sqTotChol = (df3$TotChol-mean(df3$TotChol))^2
m_sqfull_1=lm(SleepHrsNight~TotChol+sqTotChol+Age+Gender+factor(Race1)+BMI+BPDiaAve+BPSysAve+AlcoholYear+DaysMentHlthBad+HomeRooms+SexNumPartnLife+SexNumPartYear+Poverty, df3)
summary(m_sqfull_1)
############### (4) Diagnosis ########################################
rm(list = ls())
gc()
############### (1) Data cleaning ########################################
library(NHANES)
df <- NHANES[NHANES$Age >= 18 & NHANES$Age < 60,]
# colSums(is.na(df)) / nrow(df)
df <- df[, which(colSums(is.na(df)) / nrow(df) < 0.3)]
# colSums(is.na(df)) / nrow(df)
# df$BPSysAve
library(dplyr)
df2 <- df %>% select(
SleepHrsNight,
TotChol,
DirectChol,
Age,
Gender,
Race1,
BMI,
BPDiaAve,
BPSysAve,
AlcoholYear,
Poverty,
HomeRooms,
SexNumPartnLife,
SexNumPartYear,
DaysMentHlthBad
)
Hmisc::describe(df2)
df3 <- na.omit(df2)
#df3$SleepHrsNight <- df3$SleepHrsNight * 60
#df3 <- df3[, -which(names(df3) %in% "SleepHrsNight")]
# cor(df3$BPSysAve,df3$BPDiaAve)
psych::describe(df3)
# psych::pairs.panels(df3)
hist(df3$SleepHrsNight)
# colSums(is.na(df2)) / nrow(df2)
fit0 <-
lm(SleepHrsNight ~ .,
data = df3)
#data type
df3$Gender <- ifelse(df3$Gender == "male", 0, 1)
df3 <- df3 %>%
mutate(
Race1 = case_when(
Race1 == 'Black' ~ 1,
Race1 == 'Hispanic' ~ 2,
Race1 == 'Mexican' ~ 3,
Race1 == 'White' ~ 4,
Race1 == 'Other' ~ 5,
TRUE ~ NA_integer_  # Default value if none of the conditions are met
)
)
############### (2) Baseline characteristics ########################################
############### (3) linear regression model ########################################
##simple linear regression##
model1 = lm(df3$SleepHrsNight ~ df3$TotChol, data = df3)
summary(model1)
## multiple linear regression##
m_initial=lm(SleepHrsNight~TotChol+Age+Gender+factor(Race1),df3)
summary(m_initial)
m_knrisk=lm(SleepHrsNight~TotChol+Age+Gender+factor(Race1)+BMI+BPDiaAve+BPSysAve+AlcoholYear+DaysMentHlthBad,df3)
summary(m_knrisk)
m_full=lm(SleepHrsNight~TotChol+Age+Gender+factor(Race1)+BMI+BPDiaAve+BPSysAve+AlcoholYear+DaysMentHlthBad+HomeRooms+SexNumPartnLife+SexNumPartYear+Poverty, df3)
summary(m_full)
plot(df3$TotChol,df3$SleepHrsNight, main = "Scatter Plot with Linear Regression Line", xlab = "X-axis", ylab = "Y-axis")
#log outcome
df3$logSleepHrsNight = log(df3$SleepHrsNight+1)
m_logfull_1=lm(logSleepHrsNight~TotChol+Age+Gender+factor(Race1)+BMI+BPDiaAve+BPSysAve+AlcoholYear+DaysMentHlthBad+HomeRooms+SexNumPartnLife+SexNumPartYear+Poverty, df3)
summary(m_logfull_1)
#log x
df3$logTotChol = log(df3$TotChol+1)
m_logfull_2=lm(SleepHrsNight~logTotChol+Age+Gender+factor(Race1)+BMI+BPDiaAve+BPSysAve+AlcoholYear+DaysMentHlthBad+HomeRooms+SexNumPartnLife+SexNumPartYear+Poverty, df3)
summary(m_logfull_2)
# x^2
df3$sqTotChol = (df3$TotChol-mean(df3$TotChol))^2
m_sqfull_1=lm(SleepHrsNight~TotChol+sqTotChol+Age+Gender+factor(Race1)+BMI+BPDiaAve+BPSysAve+AlcoholYear+DaysMentHlthBad+HomeRooms+SexNumPartnLife+SexNumPartYear+Poverty, df3)
summary(m_sqfull_1)
############### (4) Diagnosis ########################################
View(df3)
splitIndex <- createDataPartition(df3$SleepHrsNight, p = 0.7, list = FALSE)
trainData <- df3[splitIndex, ]
testData <- df3[-splitIndex, ]
predictions <- predict(m_sqfull_1, newdata = testData)
mse <- mean((testData$SleepHrsNight - predictions)^2)
control <- trainControl(method = "cv", number = 10)  # 10-fold cross-validation
cv_model <- train(SleepHrsNight ~ ., data = df3, method = "lm", trControl = control)
cv_model
(cv_results <- cv_model$results)
View(df3)
library(ggplot2)
library(patchwork)
# Initializes an empty patchwork object
plot_list <- list()
# Draw a histogram for each numeric variable (except Race1 and Gender) and add it to the list
for(var in names(df3)) {
if(is.numeric(df3[[var]]) && !(var %in% c("Race1", "Gender"))) {
p <- ggplot(df3, aes(x = .data[[var]])) +
geom_histogram(aes(y = after_stat(density)), binwidth = 1, fill = "blue", color = "black") +
geom_density(col = "red") +
ggtitle(paste("Histogram and Density for", var)) +
xlab(var) +
ylab("Density")
plot_list[[length(plot_list) + 1]] <- p
}
}
# Use patchwork to put all the charts together
combined_plot <- wrap_plots(plot_list, ncol = 2)
print(combined_plot)
df3 <- data.frame(df3)
library(dplyr)
# Shapiro-Wilk normality test is performed for each numerical variable in df3
results <- sapply(df3, function(x) {
if(is.numeric(x)) {
shapiro_test <- shapiro.test(x)
return(c(shapiro_test$statistic, shapiro_test$p.value))
} else {
return(c(NA, NA))
}
})
# Convert the result to a data box and name the column
results_df <- as.data.frame(t(results))
names(results_df) <- c("W", "p.value")
# Add a variable name as a new column
results_df$Variable <- rownames(results_df)
# Rearrange the order of columns
results_df <- results_df[, c("Variable", "W", "p.value")]
# Calculate the corrected P-value (for example, using Bonferroni correction)
results_df$p.adjusted <- p.adjust(results_df$p.value, method = "bonferroni")
print(results_df)
rm(list = ls())
gc()
############### (1) Data cleaning ########################################
library(NHANES)
df <- NHANES[NHANES$Age >= 18 & NHANES$Age < 60, ]
# colSums(is.na(df)) / nrow(df)
df <- df[, which(colSums(is.na(df)) / nrow(df) < 0.3)]
# colSums(is.na(df)) / nrow(df)
# df$BPSysAve
library(dplyr)
df2 <- df %>% select(
SleepHrsNight,
TotChol,
DirectChol,
Age,
Gender,
Race1,
BMI,
BPDiaAve,
BPSysAve,
AlcoholYear,
Poverty,
HomeRooms,
SexNumPartnLife,
SexNumPartYear,
DaysMentHlthBad
)
Hmisc::describe(df2)
df3 <- na.omit(df2)
#df3$SleepHrsNight <- df3$SleepHrsNight * 60
#df3 <- df3[, -which(names(df3) %in% "SleepHrsNight")]
# cor(df3$BPSysAve,df3$BPDiaAve)
psych::describe(df3)
# psych::pairs.panels(df3)
hist(df3$SleepHrsNight)
# colSums(is.na(df2)) / nrow(df2)
fit0 <-
lm(SleepHrsNight ~ .,
data = df3)
#data type
df3$Gender <- ifelse(df3$Gender == "male", 0, 1)
df3 <- df3 %>%
mutate(
Race1 = case_when(
Race1 == 'Black' ~ 1,
Race1 == 'Hispanic' ~ 2,
Race1 == 'Mexican' ~ 3,
Race1 == 'White' ~ 4,
Race1 == 'Other' ~ 5,
TRUE ~ NA_integer_  # Default value if none of the conditions are met
)
)
############### (2) Baseline characteristics ########################################
############### (3) linear regression model ########################################
##simple linear regression##
model1 = lm(df3$SleepHrsNight ~ df3$TotChol, data = df3)
summary(model1)
## multiple linear regression##
m_initial = lm(SleepHrsNight ~ TotChol + Age + Gender + factor(Race1), df3)
summary(m_initial)
m_knrisk = lm(
SleepHrsNight ~ TotChol + Age + Gender + factor(Race1) + BMI + BPDiaAve +
BPSysAve + AlcoholYear + DaysMentHlthBad,
df3
)
summary(m_knrisk)
m_full = lm(
SleepHrsNight ~ TotChol + Age + Gender + factor(Race1) + BMI + BPDiaAve +
BPSysAve + AlcoholYear + DaysMentHlthBad + HomeRooms + SexNumPartnLife +
SexNumPartYear + Poverty,
df3
)
summary(m_full)
plot(
df3$TotChol,
df3$SleepHrsNight,
main = "Scatter Plot with Linear Regression Line",
xlab = "X-axis",
ylab = "Y-axis"
)
#log outcome
df3$logSleepHrsNight = log(df3$SleepHrsNight + 1)
m_logfull_1 = lm(
logSleepHrsNight ~ TotChol + Age + Gender + factor(Race1) + BMI + BPDiaAve +
BPSysAve + AlcoholYear + DaysMentHlthBad + HomeRooms + SexNumPartnLife +
SexNumPartYear + Poverty,
df3
)
summary(m_logfull_1)
#log x
df3$logTotChol = log(df3$TotChol + 1)
m_logfull_2 = lm(
SleepHrsNight ~ logTotChol + Age + Gender + factor(Race1) + BMI + BPDiaAve +
BPSysAve + AlcoholYear + DaysMentHlthBad + HomeRooms + SexNumPartnLife +
SexNumPartYear + Poverty,
df3
)
summary(m_logfull_2)
# x^2
df3$sqTotChol = (df3$TotChol - mean(df3$TotChol)) ^ 2
m_sqfull_1 = lm(
SleepHrsNight ~ TotChol + sqTotChol + Age + Gender + factor(Race1) + BMI +
BPDiaAve + BPSysAve + AlcoholYear + DaysMentHlthBad + HomeRooms + SexNumPartnLife +
SexNumPartYear + Poverty,
df3
)
summary(m_sqfull_1)
############### (4) Diagnosis: 10-fold CV ########################################
library(caret)
splitIndex <-
createDataPartition(df3$SleepHrsNight, p = 0.7, list = FALSE)
trainData <- df3[splitIndex,]
testData <- df3[-splitIndex,]
predictions <- predict(m_sqfull_1, newdata = testData)
mse <- mean((testData$SleepHrsNight - predictions) ^ 2)
control <-
trainControl(method = "cv", number = 10)  # 10-fold cross-validation
cv_model <-
train(
SleepHrsNight ~ .,
data = df3,
method = "lm",
trControl = control
)
cv_model
(cv_results <- cv_model$results)
############### (4) Diagnosis: Normality Assumption ########################################
library(ggplot2)
library(patchwork)
# Initializes an empty patchwork object
plot_list <- list()
# Draw a histogram for each numeric variable (except Race1 and Gender) and add it to the list
for (var in names(df3)) {
if (is.numeric(df3[[var]]) && !(var %in% c("Race1", "Gender"))) {
p <- ggplot(df3, aes(x = .data[[var]])) +
geom_histogram(
aes(y = after_stat(density)),
binwidth = 1,
fill = "blue",
color = "black"
) +
geom_density(col = "red") +
ggtitle(paste("Histogram and Density for", var)) +
xlab(var) +
ylab("Density")
plot_list[[length(plot_list) + 1]] <- p
}
}
# Use patchwork to put all the charts together
combined_plot <- wrap_plots(plot_list, ncol = 2)
print(combined_plot)
df3 <- data.frame(df3)
library(dplyr)
# Shapiro-Wilk normality test is performed for each numerical variable in df3
results <- sapply(df3, function(x) {
if (is.numeric(x)) {
shapiro_test <- shapiro.test(x)
return(c(shapiro_test$statistic, shapiro_test$p.value))
} else {
return(c(NA, NA))
}
})
# Convert the result to a data box and name the column
results_df <- as.data.frame(t(results))
names(results_df) <- c("W", "p.value")
# Add a variable name as a new column
results_df$Variable <- rownames(results_df)
# Rearrange the order of columns
results_df <- results_df[, c("Variable", "W", "p.value")]
# Calculate the corrected P-value (for example, using Bonferroni correction)
results_df$p.adjusted <-
p.adjust(results_df$p.value, method = "bonferroni")
print(results_df)
set.seed(123)
rm(list = ls())
gc()
library(data.table)
# Set seed and working directory
set.seed(1234)
# 读取数据
y1 <- fread('data/GSE72556_series_matrix.txt', header = FALSE, fill = TRUE)
y2 <- y1
# 移除前65行的注释
y1 <- tail(y2, -65)
# 转置数据
y1 <- transpose(y1)
rm(list = ls())
gc()
library(data.table)
rm(list = ls())
gc()
library(data.table)
# Set seed and working directory
set.seed(1234)
# setwd('/home/chenggg/BIOSTAT625/project')
# Read data
GPL13534 <- fread('GPL13534-11288.txt')
# Efficient string splitting and data manipulation
annotated_probe <-
strsplit(GPL13534$UCSC_RefGene_Name, ';', fixed = TRUE)
names(annotated_probe) <- substr(GPL13534$ID, 1, 10)
# Unlist and create a data frame
annotated_probe <-
data.frame(id = rep(names(annotated_probe), sapply(annotated_probe, length)),
gene = unlist(annotated_probe, use.names = FALSE))
# Remove duplicates
annotated_probe <- unique(annotated_probe)
# Optional: Convert to matrix if necessary
annotated_probe <- as.matrix(annotated_probe)
rm(GPL13534)
gc()
data <- read.delim('data/GSE72556_series_matrix.txt', sep = '!')
names(data) <- c("cg", "SampleCharacteristics")
# 定义一个函数来处理和分割数据
process_data <- function(data, pattern, remove_pattern, is_numeric = TRUE) {
# 提取符合模式的数据
relevant_data <- data[grepl(pattern, data$SampleCharacteristics), "SampleCharacteristics"]
# 移除不需要的文本
relevant_data <- gsub(remove_pattern, "", relevant_data)
# 额外的清洗步骤，去除制表符等
relevant_data <- gsub("\\t", "", relevant_data) # 去除制表符
relevant_data <- gsub("Sample_characteristics_ch1", "", relevant_data) # 去除特定字符串
# 分割数据
split_data <- unlist(strsplit(relevant_data, " "))
# 根据 is_numeric 参数决定是否转换为数值
if (is_numeric) {
split_data <- as.numeric(split_data)
# 移除NA值
split_data <- split_data[!is.na(split_data)]
}
return(split_data)
}
# 应用函数
child_bmi <- process_data(data, "child bmi:", "child bmi:")
adult_bmi <- process_data(data, "adult bmi:", "adult bmi:")
child_waist <- process_data(data, "child waist:", "child waist:")
adult_waist <- process_data(data, "adult waist:", "adult waist:")
gender <- process_data(data, "child gender:", "child gender:", is_numeric = FALSE)[-1]
age <- process_data(data, "child age:", "child age:")
# 处理accession number
accession <- process_data(data, "GSM", "", is_numeric = FALSE)[1:96]
accession[1] <- 'GSM1865141'
accession <- subset(accession, accession != "GSM1865188")
accession <- subset(accession, accession != "GSM1865221")
accession <- subset(accession, accession != "GSM1865231")
# 创建数据框
adult_child <- data.frame(accession, adult_bmi, child_bmi, adult_waist, child_waist, gender, age)
library(data.table)
# 读取数据
y1 <- fread('GSE72556_series_matrix.txt', header = FALSE, fill = TRUE)
y2 <- y1
# 移除前65行的注释
y1 <- tail(y2, -65)
# 转置数据
y1 <- transpose(y1)
# 设置第一列为列名,第一行为行名,然后删除
colnames(y1) <- as.character(y1[1, ])
y1 <- y1[-1, ]
getwd()
rm(list = ls())
gc()
library(data.table)
# Set seed and working directory
set.seed(1234)
# setwd('/home/chenggg/BIOSTAT625/project')
# Read data
GPL13534 <- fread('data/GPL13534-11288.txt')
# Efficient string splitting and data manipulation
annotated_probe <-
strsplit(GPL13534$UCSC_RefGene_Name, ';', fixed = TRUE)
names(annotated_probe) <- substr(GPL13534$ID, 1, 10)
# Unlist and create a data frame
annotated_probe <-
data.frame(id = rep(names(annotated_probe), sapply(annotated_probe, length)),
gene = unlist(annotated_probe, use.names = FALSE))
# Remove duplicates
annotated_probe <- unique(annotated_probe)
# Optional: Convert to matrix if necessary
annotated_probe <- as.matrix(annotated_probe)
rm(GPL13534)
gc()
data <- read.delim('data/GSE72556_series_matrix.txt', sep = '!')
names(data) <- c("cg", "SampleCharacteristics")
# 定义一个函数来处理和分割数据
process_data <- function(data, pattern, remove_pattern, is_numeric = TRUE) {
# 提取符合模式的数据
relevant_data <- data[grepl(pattern, data$SampleCharacteristics), "SampleCharacteristics"]
# 移除不需要的文本
relevant_data <- gsub(remove_pattern, "", relevant_data)
# 额外的清洗步骤，去除制表符等
relevant_data <- gsub("\\t", "", relevant_data) # 去除制表符
relevant_data <- gsub("Sample_characteristics_ch1", "", relevant_data) # 去除特定字符串
# 分割数据
split_data <- unlist(strsplit(relevant_data, " "))
# 根据 is_numeric 参数决定是否转换为数值
if (is_numeric) {
split_data <- as.numeric(split_data)
# 移除NA值
split_data <- split_data[!is.na(split_data)]
}
return(split_data)
}
# 应用函数
child_bmi <- process_data(data, "child bmi:", "child bmi:")
adult_bmi <- process_data(data, "adult bmi:", "adult bmi:")
child_waist <- process_data(data, "child waist:", "child waist:")
adult_waist <- process_data(data, "adult waist:", "adult waist:")
gender <- process_data(data, "child gender:", "child gender:", is_numeric = FALSE)[-1]
age <- process_data(data, "child age:", "child age:")
# 处理accession number
accession <- process_data(data, "GSM", "", is_numeric = FALSE)[1:96]
accession[1] <- 'GSM1865141'
accession <- subset(accession, accession != "GSM1865188")
accession <- subset(accession, accession != "GSM1865221")
accession <- subset(accession, accession != "GSM1865231")
# 创建数据框
adult_child <- data.frame(accession, adult_bmi, child_bmi, adult_waist, child_waist, gender, age)
library(data.table)
# 读取数据
y1 <- fread('data/GSE72556_series_matrix.txt', header = FALSE, fill = TRUE)
y2 <- y1
# 移除前65行的注释
y1 <- tail(y2, -65)
# 转置数据
y1 <- transpose(y1)
# 设置第一列为列名,第一行为行名,然后删除
colnames(y1) <- as.character(y1[1, ])
y1 <- y1[-1, ]
